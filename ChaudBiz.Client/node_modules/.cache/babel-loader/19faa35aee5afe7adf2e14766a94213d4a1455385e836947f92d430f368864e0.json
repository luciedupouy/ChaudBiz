{"ast":null,"code":"var _jsxFileName = \"/Users/luciedupouy/chaudbiz/ChaudBiz.Client/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  adresse\n}) => {\n  _s();\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    // Fonction pour initialiser la carte\n    const initMap = () => {\n      // Utiliser l'adresse pour récupérer les coordonnées géographiques\n      fetchCoordinates(adresse).then(coordinates => {\n        if (coordinates) {\n          // Créer une nouvelle instance de carte Google Maps\n          const googleMap = new window.google.maps.Map(document.getElementById('map'), {\n            center: {\n              lat: coordinates.latitude,\n              lng: coordinates.longitude\n            },\n            zoom: 15\n          });\n\n          // Placer un marqueur à l'emplacement du chantier\n          new window.google.maps.Marker({\n            position: {\n              lat: coordinates.latitude,\n              lng: coordinates.longitude\n            },\n            map: googleMap,\n            title: 'Emplacement du chantier'\n          });\n\n          // Mettre à jour l'état avec la carte créée\n          setMap(googleMap);\n        }\n      }).catch(error => console.error('Error fetching coordinates:', error));\n    };\n\n    // Vérifier si l'API Google Maps est disponible\n    if (!window.google) {\n      // Charger l'API Google Maps\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=VOTRE_CLE_API&libraries=places`;\n      script.async = true;\n      script.defer = true;\n      script.onload = initMap;\n      document.head.appendChild(script);\n    } else {\n      // Initialiser la carte si l'API est déjà chargée\n      initMap();\n    }\n  }, [adresse]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      width: '100%',\n      height: '400px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n// Fonction pour récupérer les coordonnées géographiques à partir de l'adresse\n_s(Map, \"4bJBv0PO2rrDzFRchWWuXyIru0A=\");\n_c = Map;\nconst fetchCoordinates = async adresse => {\n  // Effectuer une requête à l'API Geocoding pour récupérer les coordonnées géographiques\n  // Remplacez 'VOTRE_CLE_API' par votre clé API Google Maps Geocoding\n  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(adresse)}&key=VOTRE_CLE_API`);\n  const data = await response.json();\n\n  // Vérifier si la réponse est valide et qu'elle contient des résultats\n  if (data.status === 'OK' && data.results.length > 0) {\n    // Extraire les coordonnées géographiques (latitude et longitude) du premier résultat\n    const {\n      lat,\n      lng\n    } = data.results[0].geometry.location;\n    return {\n      latitude: lat,\n      longitude: lng\n    };\n  } else {\n    throw new Error('No results found');\n  }\n};\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Map","adresse","_s","map","setMap","initMap","fetchCoordinates","then","coordinates","googleMap","window","google","maps","document","getElementById","center","lat","latitude","lng","longitude","zoom","Marker","position","title","catch","error","console","script","createElement","src","async","defer","onload","head","appendChild","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","encodeURIComponent","data","json","status","results","length","geometry","location","Error","$RefreshReg$"],"sources":["/Users/luciedupouy/chaudbiz/ChaudBiz.Client/src/components/Map.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Map = ({ adresse }) => {\n  const [map, setMap] = useState(null);\n\n  useEffect(() => {\n    // Fonction pour initialiser la carte\n    const initMap = () => {\n      // Utiliser l'adresse pour récupérer les coordonnées géographiques\n      fetchCoordinates(adresse)\n        .then(coordinates => {\n          if (coordinates) {\n            // Créer une nouvelle instance de carte Google Maps\n            const googleMap = new window.google.maps.Map(document.getElementById('map'), {\n              center: { lat: coordinates.latitude, lng: coordinates.longitude },\n              zoom: 15\n            });\n\n            // Placer un marqueur à l'emplacement du chantier\n            new window.google.maps.Marker({\n              position: { lat: coordinates.latitude, lng: coordinates.longitude },\n              map: googleMap,\n              title: 'Emplacement du chantier'\n            });\n\n            // Mettre à jour l'état avec la carte créée\n            setMap(googleMap);\n          }\n        })\n        .catch(error => console.error('Error fetching coordinates:', error));\n    };\n\n    // Vérifier si l'API Google Maps est disponible\n    if (!window.google) {\n      // Charger l'API Google Maps\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=VOTRE_CLE_API&libraries=places`;\n      script.async = true;\n      script.defer = true;\n      script.onload = initMap;\n      document.head.appendChild(script);\n    } else {\n      // Initialiser la carte si l'API est déjà chargée\n      initMap();\n    }\n  }, [adresse]);\n\n  return <div id=\"map\" style={{ width: '100%', height: '400px' }}></div>;\n};\n\n// Fonction pour récupérer les coordonnées géographiques à partir de l'adresse\nconst fetchCoordinates = async (adresse) => {\n  // Effectuer une requête à l'API Geocoding pour récupérer les coordonnées géographiques\n  // Remplacez 'VOTRE_CLE_API' par votre clé API Google Maps Geocoding\n  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(adresse)}&key=VOTRE_CLE_API`);\n  const data = await response.json();\n\n  // Vérifier si la réponse est valide et qu'elle contient des résultats\n  if (data.status === 'OK' && data.results.length > 0) {\n    // Extraire les coordonnées géographiques (latitude et longitude) du premier résultat\n    const { lat, lng } = data.results[0].geometry.location;\n    return { latitude: lat, longitude: lng };\n  } else {\n    throw new Error('No results found');\n  }\n};\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}